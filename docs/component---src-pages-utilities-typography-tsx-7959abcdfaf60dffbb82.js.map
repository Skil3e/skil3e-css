{"version":3,"sources":["webpack:///./src/pages/utilities/typography.tsx","webpack:///./src/components/ExampleComponents.tsx"],"names":["fontSizes","fontWeight","textAlign","fontSizesCodeString","map","size","fontWeightCodeString","textAlignCodeString","Typography","title","id","codeString","join","key","className","SectionWrapper","children","headingSize","createLabel","lang","ExampleContainer","memo","wrapperClassName","isDefault","grid","useHeight","height","wrap","customLabel","style","minHeight","gridTemplateColumns","Child","fullwidth","CodeSample","label"],"mappings":"4FAAA,4MAIMA,EAAY,CAAE,OAAQ,OAAQ,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,SAC1EC,EAAa,CAAC,QAAS,UAAW,SAAU,OAAQ,SACpDC,EAAY,CAAC,OAAQ,SAAU,SACxBC,EAAsBH,EAAUI,KAAK,SAAAC,GAAI,qBAAoBA,EAApB,mBACzCC,EAAuBL,EAAWG,KAAK,SAAAC,GAAI,2BAA0BA,EAA1B,mBAC3CE,EAAsBL,EAAUE,KAAK,SAAAC,GAAI,2BAA0BA,EAA1B,mBA4BvCG,UA3BI,WACf,OACI,gCACI,gBAAC,IAAD,CAAKC,MAAQ,eACb,wCACA,gBAAC,IAAD,CAAgBC,GAAK,aAAeC,WAAaR,EAAoBS,KAAM,KACrEZ,EAAUI,KAAK,SAAAC,GAAI,OACjB,gBAAC,IAAD,CAAOQ,IAAMR,EAAOS,UAAgBT,EAAP,WAA7B,aAA+D,wBAAMS,UAAY,iBAAlB,IAAuCT,QAI9G,gBAAC,IAAD,CAAgBK,GAAK,eAAiBC,WAAaL,EAAqBM,KAAM,KACxEX,EAAWG,KAAK,SAAAC,GAAI,OAClB,gBAAC,IAAD,CAAOQ,IAAMR,EAAOS,UAAS,SAAaT,EAAb,WAA7B,UAAoEA,OAI5E,gBAAC,IAAD,CAAgBK,GAAK,aAAeC,WAAaJ,EAAoBK,KAAM,KACrEV,EAAUE,KAAK,SAAAC,GAAI,OACjB,gBAAC,IAAD,CAAOQ,IAAMR,EAAOS,UAAS,SAAaT,EAAb,WAA7B,UAAoEA,U,kCC7BxF,gLAWaU,EAAyD,SAAC,GAAgD,IAA7CL,EAA6C,EAA7CA,GAAIM,EAAyC,EAAzCA,SAAUL,EAA+B,EAA/BA,WAAYM,EAAmB,EAAnBA,YAChG,OACI,2BAASP,GAAKA,EAAKI,UAAY,UAC3B,sBAAIA,UAAYG,GAAgBC,YAAaR,IAC3CM,EACAL,GAAc,gBAAC,IAAD,CAAiBQ,KAAO,OAASR,WAAaA,MAgB7DS,EAA6DC,gBAAM,YAAqH,IAAjHL,EAAiH,EAAjHA,SAAUF,EAAuG,EAAvGA,UAAWQ,EAA4F,EAA5FA,iBAAkBC,EAA0E,EAA1EA,UAAWC,EAA+D,EAA/DA,KAA+D,IAAzDC,iBAAyD,aAAvCC,cAAuC,MAA9B,IAA8B,EAAzBC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,YAC9K,OACI,uBAAKd,UAAYQ,GACXR,EAAY,yBAAOA,UAAY,gBAAiB,gCAASc,GAA4Bd,EAArC,IAAmDS,GAAa,cAA+B,GACjJ,uBAAKM,MAAQ,CACTC,UAAqBL,GAAa,IAClCC,OAAqBD,GAAaC,EAClCK,oBAAqB,0CAEpBjB,WAAgBU,EAAO,OAAS,QAAvB,KAAmCG,EAAO,aAAe,IAAzD,+EAA4Ib,GACpJE,OAMLgB,EAA+FX,gBAAM,YAAiD,IAA7CP,EAA6C,EAA7CA,UAAWmB,EAAkC,EAAlCA,UAAWjB,EAAuB,EAAvBA,SAAUa,EAAa,EAAbA,MAClJ,OACI,uBAAKA,MAAQA,EAAQf,WAAgBmB,EAAY,SAAW,IAA9B,yDAA0FnB,GAAwB,KAAUE,GAAsB,YAI3KkB,EAAuE,SAAC,GAA4B,IAAzBC,EAAyB,EAAzBA,MAAOxB,EAAkB,EAAlBA,WAC3F,OACI,gCACI,yBAAOG,UAAY,eAAkBqB,GACrC,gBAAC,IAAD,CAAiBhB,KAAO,OAASR,WAAaA","file":"component---src-pages-utilities-typography-tsx-7959abcdfaf60dffbb82.js","sourcesContent":["import * as React from \"react\"\r\nimport SEO from \"../../components/seo\";\r\nimport { Child, SectionWrapper } from \"../../components/ExampleComponents\";\r\n\r\nconst fontSizes = [ 'xl-3', 'xl-2', 'xl-1', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'small', ]\r\nconst fontWeight = [\"light\", \"regular\", \"medium\", \"bold\", \"black\"]\r\nconst textAlign = [\"left\", \"center\", \"right\"]\r\nexport const fontSizesCodeString = fontSizes.map( size => `<div class=\"${ size }\">...</div>\\n` )\r\nexport const fontWeightCodeString = fontWeight.map( size => `<div class=\"font--${ size }\">...</div>\\n` )\r\nexport const textAlignCodeString = textAlign.map( size => `<div class=\"text--${ size }\">...</div>\\n` )\r\nconst Typography = () => {\r\n    return (\r\n        <>\r\n            <SEO title={ \"Typography\" }/>\r\n            <h1>Typography</h1>\r\n            <SectionWrapper id={ \"font-sizes\" } codeString={ fontSizesCodeString.join( '' ) }>\r\n                { fontSizes.map( size => (\r\n                    <Child key={ size } className={ `${ size } mb--xs` }>Font size <span className={ \"text--primary\" }>.{ size }</span></Child>\r\n                ) ) }\r\n            </SectionWrapper>\r\n\r\n            <SectionWrapper id={ \"font-weights\" } codeString={ fontWeightCodeString.join( '' ) }>\r\n                { fontWeight.map( size => (\r\n                    <Child key={ size } className={ `font--${ size } mb--xs` }>.font--{ size }</Child>\r\n                ) ) }\r\n            </SectionWrapper>\r\n\r\n            <SectionWrapper id={ \"text-align\" } codeString={ textAlignCodeString.join( '' ) }>\r\n                { textAlign.map( size => (\r\n                    <Child key={ size } className={ `text--${ size } mb--xs` }>.text--{ size }</Child>\r\n                ) ) }\r\n            </SectionWrapper>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Typography\r\n","import { CSSProperties, FunctionComponent, memo } from \"react\";\r\nimport * as React from \"react\";\r\nimport SyntaxHighlight from \"./SynaxHighlight\";\r\nimport { createLabel } from \"../utilities\";\r\n\r\ninterface sectionWrapperProps {\r\n    id: string\r\n    codeString?: string\r\n    headingSize?: string\r\n}\r\n\r\nexport const SectionWrapper: FunctionComponent<sectionWrapperProps> = ( { id, children, codeString, headingSize } ) => {\r\n    return (\r\n        <section id={ id } className={ \"pt--xs\" }>\r\n            <h2 className={ headingSize }>{ createLabel( id ) }</h2>\r\n            { children }\r\n            { codeString && <SyntaxHighlight lang={ 'html' } codeString={ codeString }/> }\r\n        </section>\r\n    )\r\n}\r\n\r\ninterface ExampleContainerProps {\r\n    className?: string,\r\n    wrapperClassName?: string,\r\n    customLabel?: string,\r\n    isDefault?: boolean,\r\n    grid?: boolean,\r\n    useHeight?: boolean,\r\n    wrap?: boolean,\r\n    height?: number\r\n}\r\n\r\nexport const ExampleContainer: FunctionComponent<ExampleContainerProps> = memo( ( { children, className, wrapperClassName, isDefault, grid, useHeight = true, height = 120, wrap, customLabel } ) => {\r\n    return (\r\n        <div className={ wrapperClassName }>\r\n            { className ? <small className={ \"block mb--xs\" }><code>.{ customLabel ? customLabel : className } { isDefault && '(default)' }</code></small> : \"\" }\r\n            <div style={ {\r\n                minHeight          : useHeight && 120,\r\n                height             : useHeight && height,\r\n                gridTemplateColumns: \" repeat(auto-fit, minmax(300px, 1fr) )\"\r\n            } }\r\n                 className={ `${ grid ? \"grid\" : \"flex\" } ${ wrap ? \"flex--wrap\" : \"\" } bg--bgDimmed text--text brd--border brd--md brd--border p--xs mb--md round ${ className }` }>\r\n                { children }\r\n            </div>\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport const Child: FunctionComponent<{ className?: string, fullwidth?: boolean, style?: CSSProperties }> = memo( ( { className, fullwidth, children, style } ) => {\r\n    return (\r\n        <div style={ style } className={ `${ fullwidth ? \"w--100\" : \"\" } p--md bg--bg text--text brd--md brd--bgDimmed round ${ className ? className : \"\" }` }>{ children ? children : \"Child\" }</div>\r\n    )\r\n} )\r\n\r\nexport const CodeSample: FunctionComponent<{ label: string, codeString: string }> = ( { label, codeString } ) => {\r\n    return (\r\n        <>\r\n            <small className={ \"block p--xs\" }>{ label }</small>\r\n            <SyntaxHighlight lang={ 'html' } codeString={ codeString }/>\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}