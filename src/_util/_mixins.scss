@use "../maps";
@use "../globals";

$borderWidth     : globals.$borderWidth !default;
$borderType      : globals.$borderType !default;
$colors          : maps.$colors !default;
$style-attribute : maps.$style-attribute !default;
$font-sizes      : maps.$font-sizes !default;
$z-index         : maps.$z-index !default;
$width           : maps.$width !default;
$positions       : maps.$positions !default;
$display-classes : maps.$display-classes !default;
$align           : maps.$align !default;
$justify         : maps.$justify !default;
$spacers         : maps.$spacers !default;

//-----------------------------
// Theme css var generator
//-----------------------------
@mixin themeVarGenerator($theme, $themeName: null) {
  @if ($themeName) {
    body[data-theme=#{$themeName}] {
      @each $color, $hex in $theme {
        --#{$color}: #{$hex};
      }
    }
  } @else {
    body {
      @each $color, $hex in $theme {
        --#{$color}: #{$hex};
      }
    }
  }
}

//-----------------------------
// Borders
//-----------------------------
@mixin borders($breakpoint) {
  @each $color, $hex in $colors {
    @each $name, $atr in ("border": border, "border-top": border-top, "border-right":border-right, "border-bottom":border-bottom, "border-left":border-left) {
      .#{$name}-#{$color} {
        #{$atr}: $borderWidth $borderType $hex;
      }
    }
  }
}

//-----------------------------
// Styles
//-----------------------------
@mixin styles($breakpoint) {
  @each $color, $hex in $colors {
    @each $name, $atr in $style-attribute {
      .#{$name}-#{$color} {
        #{$atr}: $hex;
      }
    }
  }
}

//-----------------------------
// Typography Classes
//-----------------------------
@mixin fontSizes($breakpoint) {
  @each $type, $value in $font-sizes {
    .#{$breakpoint}#{$type}, #{$type} {
      font-size : $value;
    }
  }
}

@mixin fontWeights($breakpoint) {
  @each $type, $value in ("light": 300, "regular": 500, "medium": 700, "bold": 700, "black": 900) {
    .#{$breakpoint}font-#{$type} {
      font-weight : $value;
    }
  }
}

@mixin text($breakpoint) {
  @each $type, $value in (left: left, right: right, center: center) {
    .#{$breakpoint}text-#{$value} {
      text-align : $value;
    }
  }
}

//-----------------------------
// Z Index
//-----------------------------
@mixin zIndex($breakpoint) {
  @each $name, $index in $z-index {
    .z#{$name} {
      z-index : $index;
    }
  }
}

//-----------------------------
// Width
//-----------------------------
@mixin width($breakpoint) {
  @each $name, $w in $width {
    .#{$name} {
      width : $w;
    }
  }
}

//-----------------------------
// Position
//-----------------------------
@mixin position($breakpoint) {
  @each $name, $pos in $positions {
    .#{$name} {
      position : $pos;
    }
  }
}

//-----------------------------
// Display Classes
//-----------------------------
@mixin display($breakpoint) {
  @each $type, $value in $display-classes {
    .#{$breakpoint}#{$value} {
      display : $value !important;
    }
  }
}


//-----------------------------
// Spacers Classes
//-----------------------------
@mixin spacers($breakpoint) {
  @each $prop, $prefix in (margin: m, padding: p) {
    @each $num, $value in $spacers {
      .#{$breakpoint}#{$prefix}-#{$num} {
        #{$prop}: $value !important;
      }
      .#{$breakpoint}#{$prefix}t-#{$num},
      .#{$breakpoint}#{$prefix}y-#{$num} {
        #{$prop}-top : $value !important;
      }
      .#{$breakpoint}#{$prefix}b-#{$num},
      .#{$breakpoint}#{$prefix}y-#{$num} {
        #{$prop}-bottom : $value !important;
      }
      .#{$breakpoint}#{$prefix}l-#{$num},
      .#{$breakpoint}#{$prefix}x-#{$num} {
        #{$prop}-left : $value !important;
      }
      .#{$breakpoint}#{$prefix}r-#{$num},
      .#{$breakpoint}#{$prefix}x-#{$num} {
        #{$prop}-right : $value !important;
      }
    }
  }
}

//-----------------------------
// Auto Margins
//-----------------------------
@mixin margin-auto($breakpoint) {
  .#{$breakpoint}mt-auto,
  .#{$breakpoint}my-auto {
    margin-top : auto !important;
  }
  .#{$breakpoint}mb-auto,
  .#{$breakpoint}my-auto {
    margin-bottom : auto !important;
  }
  .#{$breakpoint}ml-auto,
  .#{$breakpoint}mx-auto {
    margin-left : auto !important;
  }
  .#{$breakpoint}mr-auto,
  .#{$breakpoint}mx-auto {
    margin-right : auto !important;
  }
  .#{$breakpoint}m-auto,
  .#{$breakpoint}m-auto {
    margin : auto !important;
  }
}

//-----------------------------
// Flex Wrap
//-----------------------------
@mixin flex-row-col($breakpoint) {
  @each $type, $value in (row: row, column: column, row-reverse: row-reverse, column-reverse: column-reverse) {
    .#{$breakpoint}flex-#{$type} {
      flex-direction : $value;
    }
  }
}

//-----------------------------
// Flex Wrap
//-----------------------------
@mixin flex-wrap($breakpoint) {
  @each $type, $value in (wrap: wrap, nowrap: nowrap, wrap-reverse: wrap-reverse) {
    .#{$breakpoint}flex-#{$type} {
      flex-wrap : $value;
    }
  }
}

//-----------------------------
// Flex Fill
//-----------------------------
@mixin flex-fill($breakpoint) {
  @each $type, $value in (fill: 1 1 auto) {
    .#{$breakpoint}flex-#{$type} {
      flex : $value;
    }
  }
}

//-----------------------------
// Flex Grow
//-----------------------------
@mixin flex-grow($breakpoint) {
  @each $type, $value in (grow-0: 0, grow: 1) {
    .#{$breakpoint}flex-#{$type} {
      flex-grow : $value;
    }
  }
}

//-----------------------------
// Flex Shrink
//-----------------------------
@mixin flex-shrink($breakpoint) {
  @each $type, $value in (shrink-0: 0, shrink: 1) {
    .#{$breakpoint}flex-#{$type} {
      flex-shrink : $value;
    }
  }
}

//-----------------------------
// Align / Justify Items
//-----------------------------
@mixin align-items($breakpoint) {
  @each $type, $value in $align {
    .#{$breakpoint}al_it-#{$type} {
      align-items : $value;
    }
  }
}

@mixin justify-items($breakpoint) {
  @each $type, $value in map-remove($justify, "between", "around") {
    .#{$breakpoint}jf_it-#{$type} {
      justify-items : $value;
    }
  }
}

//-----------------------------
// Align / Justify Content
//-----------------------------
@mixin align-content($breakpoint) {
  @each $type, $value in $align {
    .#{$breakpoint}al_cnt-#{$type} {
      align-items : $value;
    }
  }
}

@mixin justify-content($breakpoint) {
  @each $type, $value in $justify {
    .#{$breakpoint}jf_cnt-#{$type} {
      justify-content : $value;
    }
  }
}

//-----------------------------
// Flex Align Self
//-----------------------------
@mixin align-self($breakpoint) {
  $align : map-merge($align, ("auto": auto));
  @each $type, $value in $align {
    .#{$breakpoint}al_self-#{$type} {
      align-self : $value;
    }
  }
}

@mixin justify-self($breakpoint) {
  $align : map-merge($align, ("auto": auto));
  @each $type, $value in map-remove($justify, "between", "around") {
    .#{$breakpoint}jf_self-#{$type} {
      align-self : $value;
    }
  }
}


