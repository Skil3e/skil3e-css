@use "../maps";
@use "../globals";
@use "../options" as opt;
//--------------------------------------------------------------//
//  Align
//  Borders
//  Colors Styles
//  Cursor
//  Display
//  Flex Direction
//  Flex Fill
//  Flex Grow
//  Flex Shrink
//  Flex Wrap
//  Justify
//  Object
//  Position
//  Screen Readers
//  Spacers
//  Typography
//  Width
//  Z Index
//--------------------------------------------------------------//
$align-item       : maps.$align-item !default;
$align-content    : maps.$align-content !default;
$align-self       : maps.$align-self !default;
$justify-item     : maps.$justify-item !default;
$justify-content  : maps.$justify-content !default;
$justify-self     : maps.$justify-self !default;
$borders          : maps.$borders !default;
$colors           : maps.$colors !default;
$cursors          : maps.$cursors-basic !default;
$style-attribute  : maps.$style-attribute !default;
$display          : maps.$display !default;
$grid-columns     : 12 !default;
$objectFit        : maps.$objectFit !default;
$object-position  : maps.$object-position !default;
$positions        : maps.$positions !default;
$positions-values : maps.$positions-values !default;
$spacers          : maps.$spacers !default;
$font-sizes       : maps.$font-sizes !default;
$width            : maps.$width !default;
$z-index          : maps.$z-index !default;
//--------------------------------------------------------------//
//  Align
//--------------------------------------------------------------//
// Align Content
@mixin align-content($breakpoint: null, $enable: true, $prefix: opt.$align-content__prefix) {
  @if ($enable) {
	@each $type, $value in $align-content {
	  .#{$breakpoint}#{$prefix}#{$type} {
		align-content : $value;
		@if ($value == start or $value == end) {
		  align-content : flex-#{$value};
		}
	  }
	}
  }
}

// Align Items
@mixin align-items($breakpoint: null, $enable: true, $prefix : opt.$align-items__prefix) {
  @if ($enable) {
	@each $type, $value in $align-item {
	  .#{$breakpoint}#{$prefix}#{$type} {
		align-items : $value;
		@if ($value == start or $value == end) {
		  align-items : flex-#{$value};
		}
	  }
	}
  }
}

// Align Self
@mixin align-self($breakpoint: null, $enable: true, $prefix : opt.$align-self__prefix) {
  @if ($enable) {
	@each $type, $value in $align-self {
	  .#{$breakpoint}#{$prefix}#{$type} {
		align-self : $value;
		@if ($value == start or $value == end) {
		  align-self : flex-#{$value};
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Borders
//--------------------------------------------------------------//
@mixin borders($breakpoint: null, $enable: true, $prefix : opt.$borders__prefix) {
  @if ($enable) {
	@each $num, $value in ("": 1px, "-2": 2px, "-3": 3px, "-4": 4px, "-5": 5px, "-0": 0) {
	  @each $name, $atr in $borders {
		@if ($value == 0) {
		  .#{$breakpoint}#{$prefix}#{$name}#{$num} {
			#{$atr}: none !important;
		  }
		} @else {
		  .#{$breakpoint}#{$prefix}#{$name}#{$num} {
			#{$atr}-width : $value;
			#{$atr}-style : solid;
		  }
		}
	  }
	}
  }
}

@mixin border-radius($breakpoint: null, $enable: true, $prefix : opt.$border-radius__prefix) {
  @if ($enable) {
	@each $num, $value in ("-xs": 0.1875rem, "-sm": .3125rem, "-md": .625rem, "-lg": .9375rem, "-circle": 1000rem, "": .25rem, '0' : 0) {
	  .#{$breakpoint}#{$prefix}#{$num} {
		border-radius : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Colors Styles
//--------------------------------------------------------------//
@mixin color-styles($breakpoint: null, $enable: true, $map: $colors, $createVars: true, $createClasses: true, $themeName: null, $element: ":root", $useFallback: false) {
  @if ($enable) {
	@if ($createVars) {
	  @if ($themeName) {
		#{$element}[data-theme=#{$themeName}] {
		  @each $color, $hex in $map {
			--#{$color}: #{$hex};
		  }
		}
	  } @else {
		#{$element} {
		  @each $color, $hex in $map {
			--#{$color}: #{$hex};
		  }
		}
	  }
	}
	@if ($createClasses) {
	  @each $color, $hex in $map {
		@each $name, $atr in $style-attribute {
		  .#{$breakpoint}#{$name}-#{$color} {
			@if ($useFallback) {
			  #{$atr}: $hex;
			}
			@if ($createVars) {
			  #{$atr}: var(--#{$color});
			}
		  }
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Cursor
//--------------------------------------------------------------//
@mixin cursor($breakpoint: null, $enable: true, $prefix : opt.$cursor__prefix) {
  @if ($enable) {
	@each $type, $value in $cursors {
	  .#{$breakpoint}#{$prefix}#{$value} {
		cursor : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Display
//--------------------------------------------------------------//
@mixin display($breakpoint: null, $enable: true, $prefix : opt.$display__prefix) {
  @if ($enable) {
	@each $type, $value in $display {
	  .#{$breakpoint}#{$prefix}#{$value} {
		display : $value !important;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Flex Direction
//--------------------------------------------------------------//
@mixin flex-direction($breakpoint: null, $enable: true, $prefix : opt.$flex-direction__prefix) {
  @if ($enable) {
	@each $type, $value in (row: row, column: column, row-reverse: row-reverse, column-reverse: column-reverse) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		display        : flex;
		flex-direction : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Flex Fill
//--------------------------------------------------------------//
@mixin flex-fill($breakpoint: null, $enable: true, $prefix : opt.$flex-fill__prefix) {
  @if ($enable) {
	@each $type, $value in (fill: 1 1 auto) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		display : flex;
		flex    : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Flex Grow
//--------------------------------------------------------------//
@mixin flex-grow($breakpoint: null, $enable: true, $prefix : opt.$flex-grow__prefix) {
  @if ($enable) {
	@each $type, $value in (grow-0: 0, grow: 1) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		display   : flex;
		flex-grow : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Flex Shrink
//--------------------------------------------------------------//
@mixin flex-shrink($breakpoint: null, $enable: true, $prefix : opt.$flex-shrink__prefix) {
  @if ($enable) {
	@each $type, $value in (shrink-0: 0, shrink: 1) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		display     : flex;
		flex-shrink : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Flex Wrap
//--------------------------------------------------------------//
@mixin flex-wrap($breakpoint: null, $enable: true, $prefix : opt.$flex-wrap__prefix) {
  @if ($enable) {
	@each $type, $value in (wrap: wrap, nowrap: nowrap, wrap-reverse: wrap-reverse) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		display   : flex;
		flex-wrap : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Grid
//--------------------------------------------------------------//
@mixin grid($breakpoint: null, $enable: true, $prefix: opt.$flex-grid__prefix) {
  @if ($enable) {
	@for $i from 1 through $grid-columns {
	  .#{$breakpoint}#{$prefix}#{$i} {
		flex : 0 0 100% / $grid-columns  * $i
	  }
	}
  }
}

@mixin grid-offset($breakpoint: null, $enable: true, $prefix: opt.$flex-grid-offset__prefix) {
  @if ($enable) {
	@for $i from 0 through ($grid-columns - 1) {
	  .#{$breakpoint}#{$prefix}#{$i} {
		margin-left : 100% / $grid-columns  * $i
	  }
	}
  }
}
//--------------------------------------------------------------//
//  Justify
//--------------------------------------------------------------//
// Justify Content
@mixin justify-content($breakpoint: null, $enable: true, $prefix : opt.$justify-content__prefix) {
  @if ($enable) {
	@each $type, $value in $justify-content {
	  .#{$breakpoint}#{$prefix}#{$type} {
		justify-content : $value;
		@if ($value == start or $value == end) {
		  justify-content : flex-#{$value};
		}
	  }
	}
  }
}

// Justify Items
@mixin justify-items($breakpoint: null, $enable: true, $prefix : opt.$justify-items__prefix) {
  @if ($enable) {
	@each $type, $value in $justify-item {
	  .#{$breakpoint}#{$prefix}#{$type} {
		justify-items : $value;
		@if ($value == start or $value == end) {
		  justify-items : flex-#{$value};
		}
	  }
	}
  }
}

// Justify Self
@mixin justify-self($breakpoint: null, $enable: true, $prefix : opt.$justify-self__prefix) {
  @if ($enable) {
	@each $type, $value in $justify-self {
	  .#{$breakpoint}#{$prefix}#{$type} {
		justify-self : $value;
		@if ($value == start or $value == end) {
		  align-self : flex-#{$value};
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Object
//--------------------------------------------------------------//
@mixin object-fit($breakpoint: null, $enable: true, $prefix : opt.$object-fit__prefix) {
  @if ($enable) {
	@each $type, $value in $objectFit {
	  .#{$breakpoint}#{$prefix}#{$type} {
		object-fit : $value;
	  }
	}
  }
}

@mixin object-position($breakpoint: null, $enable: true, $prefix : opt.$object-position__prefix) {
  @if ($enable) {
	@each $type, $value in $object-position {
	  .#{$breakpoint}#{$prefix}#{$type} {
		object-position : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Position
//--------------------------------------------------------------//
@mixin position($breakpoint: null, $enable: true) {
  @if ($enable) {
	@each $name, $pos in $positions {
	  .#{$breakpoint}#{$name} {
		position : $pos !important;
	  }
	}
	.#{$breakpoint}absolute-center {
	  position  : absolute !important;
	  left      : 50%;
	  top       : 50%;
	  transform : translate(-50%, -50%);
	}
	.#{$breakpoint}absolute-x-center {
	  position  : absolute !important;
	  left      : 50%;
	  transform : translateX(-50%);
	}
	.#{$breakpoint}absolute-y-center {
	  position  : absolute !important;
	  top       : 50%;
	  transform : translateY(-50%);
	}
  }
}

@mixin position-placement($breakpoint: null, $enable: true) {
  @if ($enable) {
	@each $num, $value in $positions-values {
	  @each $name, $pos in ('top' : top, 'right' : right, 'bottom' : bottom, 'left' : left) {
		.#{$breakpoint}#{$name}-#{$num} {
		  #{$pos} : #{$value}
		}
	  }
	  .#{$breakpoint}inset-#{$num} {
		top    : #{$value};
		right  : #{$value};
		bottom : #{$value};
		left   : #{$value};
	  }
	  .#{$breakpoint}inset-x-#{$num} {
		right : #{$value};
		left  : #{$value};
	  }
	  .#{$breakpoint}inset-y-#{$num} {
		top    : #{$value};
		bottom : #{$value};
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Screen Readers
//--------------------------------------------------------------//
@mixin screen-readers($breakpoint: null, $enable: true) {
  .#{$breakpoint}sr-only {
	position : absolute;
	width    : 1px;
	height   : 1px;
	padding  : 0;
	margin   : -1px;
	overflow : hidden;
	clip     : rect(0, 0, 0, 0);
	border   : 0;
  }

  .#{$breakpoint}not-sr-only {
	position : static;
	width    : auto;
	height   : auto;
	padding  : 0;
	margin   : 0;
	overflow : visible;
	clip     : auto;
	border   : 0;
  }

  .#{$breakpoint}sr-only-focusable:focus {
	position : relative;
	width    : auto;
	height   : auto;
  }
}

//--------------------------------------------------------------//
//  Spacers
//--------------------------------------------------------------//
@mixin spacers($breakpoint: null, $enable: true) {
  @if ($enable) {
	@each $prefix, $prop in ('m': margin, 'p': padding) {
	  @each $num, $value in $spacers {
		.#{$breakpoint}#{$prefix}-#{$num} {
		  #{$prop}: $value !important;
		}
		.#{$breakpoint}#{$prefix}t-#{$num},
		.#{$breakpoint}#{$prefix}y-#{$num} {
		  #{$prop}-top : $value !important;
		}
		.#{$breakpoint}#{$prefix}b-#{$num},
		.#{$breakpoint}#{$prefix}y-#{$num} {
		  #{$prop}-bottom : $value !important;
		}
		.#{$breakpoint}#{$prefix}l-#{$num},
		.#{$breakpoint}#{$prefix}x-#{$num} {
		  #{$prop}-left : $value !important;
		}
		.#{$breakpoint}#{$prefix}r-#{$num},
		.#{$breakpoint}#{$prefix}x-#{$num} {
		  #{$prop}-right : $value !important;
		}
	  }
	}
  }
}

// Auto Margins
@mixin margin-auto($breakpoint: null, $enable: true) {
  @if ($enable) {
	.#{$breakpoint}mt-auto,
	.#{$breakpoint}my-auto {
	  margin-top : auto !important;
	}
	.#{$breakpoint}mb-auto,
	.#{$breakpoint}my-auto {
	  margin-bottom : auto !important;
	}
	.#{$breakpoint}ml-auto,
	.#{$breakpoint}mx-auto {
	  margin-left : auto !important;
	}
	.#{$breakpoint}mr-auto,
	.#{$breakpoint}mx-auto {
	  margin-right : auto !important;
	}
	.#{$breakpoint}m-auto,
	.#{$breakpoint}m-auto {
	  margin : auto !important;
	}
  }
}

//--------------------------------------------------------------//
//  Typography
//--------------------------------------------------------------//
@mixin fontSizes($breakpoint: null, $enable: true) {
  @if ($enable) {
	@each $type, $value in $font-sizes {
	  .#{$breakpoint}#{$type}, #{$type} {
		font-size : $value;
	  }
	}
  }
}

@mixin fontWeights($breakpoint: null, $enable: true, $prefix : opt.$fontWeights__prefix) {
  @if ($enable) {
	@each $type, $value in ("light": 300, "regular": 500, "medium": 700, "bold": 700, "black": 900) {
	  .#{$breakpoint}#{$prefix}#{$type} {
		font-weight : $value;
	  }
	}
  }
}

@mixin text-align($breakpoint: null, $enable: true, $prefix : opt.$text-align__prefix) {
  @if ($enable) {
	@each $type, $value in (left: left, right: right, center: center) {
	  .#{$breakpoint}#{$prefix}#{$value} {
		text-align : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Width
//--------------------------------------------------------------//
@mixin width($breakpoint: null, $enable: true) {
  @if ($enable) {
	@each $name, $w in $width {
	  .#{$breakpoint}#{$name} {
		width : $w;
	  }
	}
  }
}

//--------------------------------------------------------------//
//  Z Index
//--------------------------------------------------------------//
@mixin zIndex($breakpoint: null, $enable: true, $prefix : opt.$zIndex__prefix) {
  @if ($enable) {
	@each $name, $index in $z-index {
	  .#{$breakpoint}#{$prefix}#{$name} {
		z-index : $index;
	  }
	}
  }
}
