@use "../functions-mixins/acc-colors" as acc;

@function isEmpty($value) {
  @if not $value
      or $value == ""
      or $value == 0
      or $value == ()
      or length($value) == 0 {
	@return true;
  }
  @return false;
}

@function makeClass( $name, $prefix, $divider, $breakpoint, $posDivider:null, $p:null, $parent:null ) {
  @if ($name == "") {
	@return "#{$parent} .#{$breakpoint}#{$prefix}#{$posDivider}#{$p}";
  } @else {
	@return "#{$parent} .#{$breakpoint}#{$prefix}#{$posDivider}#{$p}#{$divider}#{$name}";
  }
}

@function removeFromMap($values, $map) {
  $length : length($values);
  @if ($length > 1) {
	$restMap : $map;
	@each $key in $values {
	  $restMap : map-remove($restMap, $key);
	}
	@return $restMap;
  } @else {
	@return map-remove($map, $values);
  }
}
//--------------------------------------------------------------//
// Make Utilities
//--------------------------------------------------------------//
@mixin makeUtil($property, $prefix, $values, $divider, $breakpoint: null, $disable: false) {
  @if ($disable != true) {
	@each $name, $value in $values {
	  #{makeClass($name, $prefix, $divider, $breakpoint)} {
		#{$property}: $value;
		@if ($value != none) {
		  @content
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
// Make Utilities with Position
//--------------------------------------------------------------//
$positions : (
	"t": "top",
	"b": "bottom",
	"l": "left",
	"r": "right"
) !default;

@mixin makeUtilPos($property, $prefix, $values, $divider, $posDivider, $breakpoint: null, $disable: false) {
  @include makeUtil($property, $prefix, $values, $divider, $breakpoint, $disable) {
	@content
  }
  @if ($disable != true) {
	@each $name, $value in $values {
	  @each $posName, $posValue in $positions {
		@if ($posValue == "top" or $posValue == "bottom") {
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, $posName )},
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, y )} {
			#{$property}-#{$posValue}: $value;
			@if ($value != none) {
			  @content
			}
		  }
		}
		@if ($posValue == "left" or $posValue == "right") {
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, $posName )},
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, x )} {
			#{$property}-#{$posValue}: $value;
			@if ($value != none) {
			  @content
			}
		  }
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
// Border Radius
//--------------------------------------------------------------//
@mixin border-radius( $values, $prefix, $divider, $posDivider, $breakpoint: null, $disable: false) {
  @include makeUtil("border-radius", $prefix, $values, $divider, $breakpoint, $disable);
  @if ($disable != true) {
	@each $name, $value in $values {
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "tl" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "t" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "l" )}, {
		border-top-left-radius : $value;
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "tr" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "t" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "r" )} {
		border-top-right-radius : $value;
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "bl" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "b" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "l" )} {
		border-bottom-left-radius : $value;
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "br" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "b" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "r" )}, {
		border-bottom-right-radius : $value;
	  }
	}
  }
}

//--------------------------------------------------------------//
// Make Colors
//--------------------------------------------------------------//
@mixin makeColorVars($values, $selector, $namePrefix:null, $disable: false) {
  @if ($disable != true) {
	#{$selector} {
	  @each $name, $value in $values {
		--#{$namePrefix}#{$name}: #{$value};
	  }
	}
  }
}

@mixin makeColors($styleProperties, $values, $divider, $makeVarsSelector: false, $useCallback: false, $breakpoint: null, $disable: false) {
  @if ($disable != true) {
	@if ($makeVarsSelector) {
	  @include makeColorVars($values, $makeVarsSelector);
	}
	@each $prefix, $property in $styleProperties {
	  @each $name, $value in $values {
		#{makeClass($name, $prefix, $divider, $breakpoint)} {
		  @if ($useCallback) {
			#{$property}: $value;
		  }
		  #{$property}: var(--#{ $name });
		}
	  }
	}
  }
}
