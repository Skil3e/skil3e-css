@use "acc-colors" as acc;

@function makeClass( $name, $prefix, $divider, $breakpoint, $posDivider:null, $p:null, $parent:null ) {
  @if ($name == "" or $name == null) {
	@return "#{$parent} .#{$breakpoint}#{$prefix}#{$posDivider}#{$p}";
  } @else if ($prefix == "" or $prefix == null) {
	@return "#{$parent} .#{$breakpoint}#{$posDivider}#{$p}#{$name}";
  } @else {
	@return "#{$parent} .#{$breakpoint}#{$prefix}#{$posDivider}#{$p}#{$divider}#{$name}";
  }
}

@function removeFromMap($values, $map) {
  $length : length($values);
  @if ($length > 1) {
	$restMap : $map;
	@each $key in $values {
	  $restMap : map-remove($restMap, $key);
	}
	@return $restMap;
  } @else {
	@return map-remove($map, $values);
  }
}

//--------------------------------------------------------------//
// Make Utilities
//--------------------------------------------------------------//
@mixin makeUtil($property, $prefix, $values, $divider, $breakpoint: null, $disable: false, $important: false) {
  @if ($disable != true) {
	@each $name, $value in $values {
	  #{makeClass($name, $prefix, $divider, $breakpoint)} {
		#{$property}: #{$value} #{if($important, "!important", null)};
		@if ($value != none) {
		  @content
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
// Make Utilities with Position
//--------------------------------------------------------------//
$positions : (
	"t": "top",
	"b": "bottom",
	"l": "left",
	"r": "right"
) !default;

@mixin makeUtilPos($property, $prefix, $values, $divider, $posDivider, $breakpoint: null, $disable: false, $important) {
  @include makeUtil($property, $prefix, $values, $divider, $breakpoint, $disable) {
	@content
  }
  @if ($disable != true) {
	@each $name, $value in $values {
	  @each $posName, $posValue in $positions {
		@if ($posValue == "top" or $posValue == "bottom") {
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, $posName )},
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, y )} {
			#{$property}-#{$posValue}: #{$value} #{if($important, "!important", null)};
			@if ($value != none) {
			  @content
			}
		  }
		}
		@if ($posValue == "left" or $posValue == "right") {
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, $posName )},
		  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, x )} {
			#{$property}-#{$posValue}: #{$value} #{if($important, "!important", null)};
			@if ($value != none) {
			  @content
			}
		  }
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
// Border Radius
//--------------------------------------------------------------//
@mixin border-radius( $values, $prefix, $divider, $posDivider, $breakpoint: null, $disable: false, $important) {
  @include makeUtil("border-radius", $prefix, $values, $divider, $breakpoint, $disable);
  @if ($disable != true) {
	@each $name, $value in $values {
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "tl" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "t" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "l" )}, {
		border-top-left-radius : #{$value}  #{if($important, "!important", null)};
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "tr" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "t" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "r" )} {
		border-top-right-radius : #{$value}  #{if($important, "!important", null)};
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "bl" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "b" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "l" )} {
		border-bottom-left-radius : #{$value}  #{if($important, "!important", null)};
	  }
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "br" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "b" )},
	  #{makeClass( $name, $prefix, $divider, $breakpoint, $posDivider, "r" )}, {
		border-bottom-right-radius : #{$value}  #{if($important, "!important", null)};
	  }
	}
  }
}

//--------------------------------------------------------------//
// Make Colors
//--------------------------------------------------------------//
@mixin makeColorVars($values, $selector, $namePrefix:null, $disable: false) {
  @if ($disable != true) {
	#{$selector} {
	  @each $name, $value in $values {
		--#{$namePrefix}#{$name}: #{$value};
	  }
	}
  }
}

@mixin makeColors($styleProperties, $values, $divider, $makeVarsSelector: false, $useCallback: false, $breakpoint: null, $disable: false, $important, $hover) {
  @if ($disable != true) {
	@if ($makeVarsSelector) {
	  @include makeColorVars($values, $makeVarsSelector);
	}
	@each $prefix, $property in $styleProperties {
	  @each $name, $value in $values {
		#{makeClass($name, $prefix, $divider, $breakpoint)} {
		  @if ($useCallback) {
			#{$property}: #{$value} #{if($important, "!important", null)};
		  }
		  #{$property}: var(--#{ $name }) #{if($important, "!important", null)};
		}
		@if ($hover) {
		  .#{$breakpoint}hover\:#{$prefix}#{$divider}#{$name}:hover {
			#{$property}: var(--#{$name}) #{if($important, "!important", null)};
		  }
		}
	  }
	}
  }
}

//--------------------------------------------------------------//
// Make XYCenter
//--------------------------------------------------------------//
@mixin makeXYCenter($values, $divider, $breakpoint) {
  @each $type in $values {
	.#{$breakpoint}#{$type}#{$divider}center {
	  position  : #{$type} !important;
	  left      : 50%;
	  top       : 50%;
	  transform : translate(-50%, -50%);
	}
	.#{$breakpoint}#{$type}-x#{$divider}center {
	  position  : #{$type} !important;
	  left      : 50%;
	  transform : translateX(-50%);
	}
	.#{$breakpoint}#{$type}-y#{$divider}center {
	  position  : #{$type} !important;
	  top       : 50%;
	  transform : translateY(-50%);
	}
  }
}

//--------------------------------------------------------------//
// Make Position Placement
//--------------------------------------------------------------//
@mixin makePositionPlacement($values, $positions, $divider, $breakpoint: null, $important) {
  @each $num, $value in $values {
	@each $name, $pos in $positions {
	  #{makeClass( $num, $name, $divider, $breakpoint )} {
		#{$pos} : #{$value} #{if($important, "!important", null)};
	  }
	}
	.#{$breakpoint}inset#{$divider}#{$num} {
	  top    : #{$value} #{if($important, "!important", null)};
	  right  : #{$value} #{if($important, "!important", null)};
	  bottom : #{$value} #{if($important, "!important", null)};
	  left   : #{$value} #{if($important, "!important", null)};
	}
	.#{$breakpoint}inset-x#{$divider}#{$num} {
	  right : #{$value} #{if($important, "!important", null)};
	  left  : #{$value} #{if($important, "!important", null)};
	}
	.#{$breakpoint}inset-y#{$divider}#{$num} {
	  top    : #{$value} #{if($important, "!important", null)};
	  bottom : #{$value} #{if($important, "!important", null)};
	}
  }
}

//--------------------------------------------------------------//
//  Make Screen Readers
//--------------------------------------------------------------//
@mixin makeScreenReaders($breakpoint: null) {
  .#{$breakpoint}sr-only {
	position : absolute;
	width    : 1px;
	height   : 1px;
	padding  : 0;
	margin   : -1px;
	overflow : hidden;
	clip     : rect(0, 0, 0, 0);
	border   : 0;
  }

  .#{$breakpoint}not-sr-only {
	position : static;
	width    : auto;
	height   : auto;
	padding  : 0;
	margin   : 0;
	overflow : visible;
	clip     : auto;
	border   : 0;
  }

  .#{$breakpoint}sr-only-focusable {
	position : absolute;
	width    : 1px;
	height   : 1px;
	padding  : 0;
	margin   : -1px;
	overflow : hidden;
	clip     : rect(0, 0, 0, 0);
	border   : 0;

	&:focus {
	  position : relative;
	  width    : auto;
	  height   : auto;
	}
  }
}

//--------------------------------------------------------------//
//  Make Grid
//--------------------------------------------------------------//
@mixin makeGrid($columns, $prefix, $divider, $breakpoint: null) {
  @for $i from 1 through $columns {
	.#{$breakpoint}#{$prefix}#{$divider}#{$i} {
	  flex      : 0 0 100% / $columns  * $i;
	  max-width : 100% / $columns * $i;
	}
  }
  .#{$breakpoint}#{$prefix} {
	flex      : 1 1 0;
	max-width : 100%;
	min-width : 0;
  }
}

@mixin makeGridOffset($columns, $prefix, $divider, $breakpoint: null) {
  @for $i from 0 through ($columns - 1) {
	.#{$breakpoint}#{$prefix}#{$divider}#{$i} {
	  margin-left : 100% / $columns  * $i
	}
  }
}

@mixin makeGridOrder($columns, $prefix, $divider, $breakpoint: null) {
  @for $i from 0 through ($columns + 1) {
	.#{$breakpoint}#{$prefix}#{$divider}#{$i} {
	  @if $i == 0 {
		order : -1;
	  } @else {
		order : $i;
	  }
	}
  }
}
